import { IAppConfig, INavigationItem, IUser } from "@/utils/types"
import axios from "axios"
import { parseCookies } from "nookies" // Import nookies to read cookies
import { Metadata } from "next"
import App from "next/app"

// Application Metadata
export const MetaData = {
  title: "MES Application",
  description: "Generated by MES Application",
}

// Application Configuration
export const AppConfig: IAppConfig = {
  siteName: "MES Application",
  // logoPath: "/assets/images/ElitiaMesLogo.png",
  logoPath: "/assets/images/logo.png",
  imagePath: "/assets/images",
}

// Navigation Items
export const UserNavigation: INavigationItem[] = [
  {
    name: "Profile",
    href: "/profile",
  },
  {
    name: "Settings",
    href: "/settings",
  },
  {
    name: "Logout",
    href: "/logout",
  },
]

// Function to get the user's image (from session storage or backend)
export const getUserImage = (user: IUser): string => {
  // Check if session storage contains a custom image
  const storedAvatar = sessionStorage.getItem(`avatar_${user.email}`)
  if (storedAvatar) {
    return storedAvatar
  }

  // If no custom image in session, return the backend image
  return user.photoUrl
}

// Fetch user details based on email (from backend)
export const getUserDetails = async (
  email: string,
): Promise<IUser | undefined> => {
  try {
    // Fetch token from cookies
    const cookies = parseCookies()
    const token = cookies.authToken // Make sure the cookie name is 'authToken'
    if (!token) {
      console.error("No authentication token found in cookies")
      return undefined
    }

    const response = await axios.get(
      `${process.env.NEXT_PUBLIC_API_URL}/user/details?email=${email}`,
      {
        headers: {
          Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
        },
      },
    )

    return response.data.Data || undefined
  } catch (error) {
    console.error("Error fetching user details", error)
    return undefined
  }
}

// Update user details
export const updateUserDetails = async (updatedUser: IUser): Promise<void> => {
  try {
    // Fetch token from cookies
    const cookies = parseCookies()
    const token = cookies.authToken // Make sure the cookie name is 'authToken'
    if (!token) {
      console.error("No authentication token found in cookies")
      return
    }

    await axios.put(
      `${process.env.NEXT_PUBLIC_API_URL}/user/update`,
      updatedUser,
      {
        headers: {
          Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
        },
      },
    )

    alert("User details updated successfully!")
  } catch (error) {
    console.error("Error updating user details", error)
    alert("Failed to update user details.")
  }
}

// import { IAppConfig, INavigationItem, IUser } from "@/utils/types"
// import axios from "axios"
// import { parseCookies } from "nookies" // Import nookies to read cookies
// import { Metadata } from "next"
// import App from "next/app"

// // Application Metadata
// export const MetaData = {
//   title: "MES Application",
//   description: "Generated by MES Application",
// }

// // Application Configuration
// export const AppConfig: IAppConfig = {
//   siteName: "MES Application",
//   logoPath: "/assets/images/logo.png",
//   imagePath: "/assets/images",
// }

// // Navigation Items
// export const UserNavigation: INavigationItem[] = [
//   {
//     name: "Profile",
//     href: "/profile",
//   },
//   {
//     name: "Settings",
//     href: "/settings",
//   },
//   {
//     name: "Logout",
//     href: "/logout",
//   },
// ]

// // Function to get the user's image (from session storage or backend)
// export const getUserImage = (user: IUser): string => {
//   // Check if session storage contains a custom image
//   const storedAvatar = sessionStorage.getItem(`avatar_${user.email}`)
//   if (storedAvatar) {
//     return storedAvatar
//   }

//   // If no custom image in session, return the backend image
//   return user.photoUrl
// }

// // Fetch user details based on email (from backend)
// export const getUserDetails = async (
//   email: string,
// ): Promise<IUser | undefined> => {
//   try {
//     // Fetch token from cookies
//     const cookies = parseCookies()
//     const token = cookies.authToken // Make sure the cookie name is 'authToken'
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return undefined
//     }

//     const response = await axios.get(
//       `${process.env.NEXT_PUBLIC_API_URL}/user/details?email=${email}`,
//       {
//         headers: {
//           Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
//         },
//       },
//     )

//     return response.data.Data || undefined
//   } catch (error) {
//     console.error("Error fetching user details", error)
//     return undefined
//   }
// }

// // Update user details
// export const updateUserDetails = async (updatedUser: IUser): Promise<void> => {
//   try {
//     // Fetch token from cookies
//     const cookies = parseCookies()
//     const token = cookies.authToken // Make sure the cookie name is 'authToken'
//     if (!token) {
//       console.error("No authentication token found in cookies")
//       return
//     }

//     await axios.put(
//       `${process.env.NEXT_PUBLIC_API_URL}/user/update`,
//       updatedUser,
//       {
//         headers: {
//           Authorization: `Bearer ${token}`, // Pass the token in the Authorization header
//         },
//       },
//     )

//     alert("User details updated successfully!")
//   } catch (error) {
//     console.error("Error updating user details", error)
//     alert("Failed to update user details.")
//   }
// }
